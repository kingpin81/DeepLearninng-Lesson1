import numpy as np

# 4) Найти максимальный элемент в векторе x среди элементов, перед которыми
# стоит нулевой. Для x = np.array([6, 2, 0, 3, 0, 0, 5, 7, 0]), ответ: 5.

x = np.array([6, 2, 0, 3, 0, 0, 5, 7, 0])

# 1. First way
def getMaxOriginal():
    list = []
    for i, column in enumerate(x):
        if i == 0:
            continue
        else:
            if x[i - 1] == 0:
                list.append(x[i])

    return max(list)

# %timeit result = getMaxOriginal()
print(getMaxOriginal())

# 2. With numpy
def getMaxNumpy():
        # Нашел такой синтаксис в интернете но не до конца понял как он работает:
        return  x[1:][(x == 0)[:-1]].max()
        # - например, я понял, что с помощью конструкции x[(x != 0)] мы может отобрать все ненулевые элементы, как в задании №1,
        # max() - максимальный элемент из полученного объекта. А вот как работают индексы внутри квадратных скобок с
        # такой конструкцией, не совсем понятно.
        # Могу только предположить, что начинаем обход со второго элемента в массиве (индекс 1), а для стоящего перед ним (индекс -1)
        # применяем условие что этот элемент (предыдущий) должен быть равен нулю.

# %timeit result = getMaxNumpy()
print(getMaxNumpy())

